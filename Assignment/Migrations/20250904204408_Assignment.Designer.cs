// <auto-generated />
using System;
using Assighment.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250904204408_Assignment")]
    partial class Assignment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assighment.Entities.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OwnerbyId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OwnerbyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Assighment.Entities.CourseInstructor", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int")
                        .HasColumnName("InstID");

                    b.Property<string>("evaluate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CourseID", "InstructorID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Course_Insts");
                });

            modelBuilder.Entity("Assighment.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeptID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Ins_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Assighment.Entities.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Bouns")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Dept_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("HourRate")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("Dept_ID")
                        .IsUnique()
                        .HasFilter("[Dept_ID] IS NOT NULL");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Assighment.Entities.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StudyingId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudyingId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Assighment.Entities.StudentCourse", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("StudentID")
                        .HasColumnType("int")
                        .HasColumnName("StudID");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CourseID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Stud_Courses");
                });

            modelBuilder.Entity("Assighment.Entities.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TopicID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Assighment.Entities.Course", b =>
                {
                    b.HasOne("Assighment.Entities.Topic", "Ownerby")
                        .WithMany("Courses")
                        .HasForeignKey("OwnerbyId");

                    b.Navigation("Ownerby");
                });

            modelBuilder.Entity("Assighment.Entities.CourseInstructor", b =>
                {
                    b.HasOne("Assighment.Entities.Course", null)
                        .WithMany("courseInstructors")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assighment.Entities.Instructor", null)
                        .WithMany("Instructors")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assighment.Entities.Instructor", b =>
                {
                    b.HasOne("Assighment.Entities.Department", "department")
                        .WithOne("Work")
                        .HasForeignKey("Assighment.Entities.Instructor", "Dept_ID");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Assighment.Entities.Student", b =>
                {
                    b.HasOne("Assighment.Entities.Department", "Studying")
                        .WithMany("Students")
                        .HasForeignKey("StudyingId");

                    b.Navigation("Studying");
                });

            modelBuilder.Entity("Assighment.Entities.StudentCourse", b =>
                {
                    b.HasOne("Assighment.Entities.Course", null)
                        .WithMany("studentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assighment.Entities.Student", null)
                        .WithMany("Students")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assighment.Entities.Course", b =>
                {
                    b.Navigation("courseInstructors");

                    b.Navigation("studentCourses");
                });

            modelBuilder.Entity("Assighment.Entities.Department", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Assighment.Entities.Instructor", b =>
                {
                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("Assighment.Entities.Student", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Assighment.Entities.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
